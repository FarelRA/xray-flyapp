################################
# App configuration
# Name, Region, Env, and Machine

app = 'farel'
primary_region = 'sin'

[env]
sshPubKey = 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHZ2+s38OZO9N/nxhyz4K8K4bk29h8gSSZ5LQk3FKVdy farel@CachyOS'
pathPrefix = '/proxy/flyio'
cloudflareIP = '104.24.215.58'
SSEncrypt = 'chacha20-ietf-poly1305'

[[vm]]
cpu_kind = "shared"
cpus = 1
memory_mb = 256


################################
# Build and App configuration
# DO NOT CHANGE unless you know

kill_signal = 'SIGTERM'
kill_timeout = '2m0s'

[build]
dockerfile = 'Dockerfile'
build-target = 'main'


################################
# SSH configuration
# Expose system ssh

# SSH service (TCP)
[[services]]
protocol = 'tcp'
internal_port = 7012

[[services.ports]]
port = 24

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768


################################
# NGINX service (Port 80 and 443)
# Used by NGINX for Xray routing

# Expose HTTP and HTTPS service
[http_service]
internal_port = 7004
force_https = false

[http_service.http_options]
h2_backend = true

[http_service.http_options.response]
pristine = true

[http_service.tls_options]
alpn = ["h2", "http/1.1"]
versions = ["TLSv1.2", "TLSv1.3"]

[http_service.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768


################################
# NGINX service (Port 2053 and 8880)
# Used by NGINX for Cloudflare Proxy

# Cloudflare TLS proxy
[[services]]
protocol = 'tcp'
internal_port = 7005

[[services.ports]]
port = 2053

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Cloudflare non-TLS proxy
[[services]]
protocol = 'tcp'
internal_port = 7006

[[services.ports]]
port = 8880

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768


################################
# Xray configuration
# Expose non-routable proxies

# HTTPS proxy
[[services]]
protocol = 'tcp'
internal_port = 7007

[[services.ports]]
port = 8443
handlers = ['tls']

[services.ports.tls_options]
alpn = ["h2", "http/1.1"]
versions = ["TLSv1.2", "TLSv1.3"]

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# HTTP proxy
[[services]]
protocol = 'tcp'
internal_port = 7007

[[services.ports]]
port = 8080

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Socks proxy (TCP)
[[services]]
protocol = 'tcp'
internal_port = 7008

[[services.ports]]
port = 1080

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Socks proxy (UDP)
[[services]]
protocol = 'udp'
internal_port = 7008

[[services.ports]]
port = 1080

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# ShadowSocks proxy (TCP)
[[services]]
protocol = 'tcp'
internal_port = 7009

[[services.ports]]
port = 8388

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768


################################
# frps configuration
# Web pannel and services port

# HTTPS web pannel
[[services]]
protocol = 'tcp'
internal_port = 7003

[[services.ports]]
port = 5443
handlers = ['tls', 'http']

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# HTTP web pannel
[[services]]
protocol = 'tcp'
internal_port = 7003

[[services.ports]]
port = 5000
handlers = ['http']

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# TCP connection service on 7000
[[services]]
protocol = 'tcp'
internal_port = 7000

[[services.ports]]
port = 7000

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# UDP (KCP) connection service on 7001
[[services]]
protocol = 'udp'
internal_port = 7001

[[services.ports]]
port = 7001

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# UDP (Quic) connection service on 7002
[[services]]
protocol = 'udp'
internal_port = 7002

[[services.ports]]
port = 7002

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768


################################
# frps port forward configuration
# port open by frps for reverse proxy

# Experimental port uses (TCP)
[[services]]
protocol = 'tcp'
internal_port = 1500

[[services.ports]]
port = 1500

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Experimental port uses (UDP)
[[services]]
protocol = 'udp'
internal_port = 1500

[[services.ports]]
port = 1500

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# SSH service (TCP)
# Forwarded to 8022 then open to port 22 by fly
[[services]]
protocol = 'tcp'
internal_port = 1501

[[services.ports]]
port = 25

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# VNC service
# TCP version, use port 5900
[[services]]
protocol = 'tcp'
internal_port = 1502

[[services.ports]]
port = 5900

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# VNC service
# UDP version, use port 5900
[[services]]
protocol = 'udp'
internal_port = 1502

[[services.ports]]
port = 5900

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Minecraft Java (TCP)
[[services]]
protocol = 'tcp'
internal_port = 1503

[[services.ports]]
port = 25565

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768

# Minecraft Bedrock (UDP)
[[services]]
protocol = 'udp'
internal_port = 1504

[[services.ports]]
port = 19132

[services.concurrency]
type = 'connections'
hard_limit = 1024
soft_limit = 768